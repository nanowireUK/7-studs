New, unsorted:
- Start player in first round of betting based on lowest card first (including suits)
- I need to cycle the DB keys
- Game log needs to record game options for replay (and replay needs to set correct defaults to support historical games)
- Player rename (make name an attribute of a player object)
- Room expiry, 24 hours if game had not returned to lobby, 2 hours if in lobby?
- From 15 Jan 21:
  - Siren on demand (majority vote ... not necessarily easy, would require new server actions)
  - Klaxon (whhop whoop) for all-in
  - Klaxon on win
  - Improve UI for phone
  - Notes should explain the way we order bankruptcies (the principle is the later you put all your funds at risk the better)
- Test various-way ties (joint first, joint second, multi-way, etc.)
- Remove GetLog option?
- Blind players need to be more obvious
- Increase hooter time as rounds progress
- Nigel: make game reports downloadable?
- Document versioning to allow different code paths to import documents of any old versioning
  - i.e. support old versions feeding into same object structures
  - are there standard approaches to doing this?
- Metrics 
- Jupyter notebooks for SQL queries
- Bug check from 12/12/20: Adam left with cash left during a hand and disappeared from lobby; Jon left with 0 and was still in lobby (probably sorted?)
- Admin can fold someone who's not available (when it's their turn)
- Admin can kick someone out of the game (at any time)
- Find a way for someone to take over adminship
- Game settings for auto-fold on time out(30 secs?)
- WebRTC (or Google Meeting) for integrating player video or avatars
- Game graphic (casino)?
- Keep stats on how long each player took in total for their moves

Notes:
- Hierarchy is Room > Game > Deal (or hand) > Betting Round (or card(s) dealt)
- Could add Session above Game (to track player results over a whole session as per my spreadsheet)

Backlog ideas
-------------

Investigate:
- How does https://github.com/deck-of-cards/deck-of-cards represent its cards? We should use that if possible
- Comms component: SignalR

Server:
- Process request to join new game
- Create new game, obtain link to invite people in (return to UI for cut/paste)
- Process applications to join game
- Commence game
  - No longer accept applications
  - Set player order (e.g. randomly)
  - Send out start situation to all players
- Process player moves (assumption: only one player has any options open to them at any one point in time)
  - Fold 
  - Check (start round with zero bet, or match zero bet)
  - Call (match current bet)
  - Raise (match current bet and increase it)
  - All-in (like raise but uses all of player's remaining funds)
  - Cover pot (already all-in, but cannot match further raises)
- Handle end of a round
  - Divvy up pots to various players
  - Send round summary (all players have to acknowledge?)
- How does a game end? Timeout, until only two players left, ...
  - Probably depends on how many people get prize money
- Start new game with same players (reinitialise decks, pots etc.)
- Handle pot covering: create new covered pot, covering all bets currently placed up to all-in amount of covering player
  - Note: further people could cover that pot with a lesser amount, requiring the covered pot to be split further
  - Create new, active, uncovered pot to contain any excesses over the covered amount, and to contain any further raises

Test server functions:
- All via console? How to get that started
- Game initialisation:
  - Create game (returns initial game state to first player, enables him to share game id with others)
  - Join game (new player sends join request; updated, personalised game state shared with all other players) ... repeat until all players have joined
  - Commence game (initial player only can close new registrations and start the game; everyone receives updated, personalised game state)
  - Rejoin game (any player can ask to rejoin in case e.g. they lose network ... will need their rejoin key; player will receive latest game state)
- Process events:
  - Receive and process action (process action; everyone receives updated, personalised game state)
- 
Utility functions:
- JSON serialiser/deserialiser
- Identify best hand where each hand has from 3 - 7 cards (allow for ties)
  - Use same algorithm to determine (a) first person to bet in a round and (b) overall hand winner(s)
- Deal random card to 'n' players (allowing for cards already in players' hands)
- Log activities to enable games to be replayed (e.g. for testing) ... standard game log format?
  - Is this just a series of simple events?
  - e.g. event #1 = player 1 raises 'n'; event #2 = player 2 calls; event #2 = player 3 folds; etc.

UI
- Continuously receive game state updates from server: 
  - Entire state sent in one go to enable screen to be rebuild from scratch
  - Display own cards
  - Display other players card 
  - Show players reserves
  - Show players contributions to pot(s)
  - Activate all options currently open to player (none, check, call, raise, all-in, cover pot, fold)
- Process player actions (send to server for processing)
- Display end of round summary (who won what) before allowing next round to proceed

- Talk to Chris Jones? He was part of a poker site development team at one time

-- https://techeplanet.com/json-example/

- Client: TABS  for e.g. previous hand results; game options

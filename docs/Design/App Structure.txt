

ChatHub.cs   - server-side code  (in \server\Hubs)               
                - implements ProcessActionAndSendUpdatedGameState, which sends RPC (e.g. "ReceiveUpdatedGameState") to one or more clients

chat.js      - client-side code (in \server\wwwroot\js)
                - handles remote procedure calls (RPC's) from server (such as "ReceiveUpdatedGameState")
                - sets up event handler for button that sends RPC to server (e.g. "ProcessActionAndSendUpdatedGameState")
                
index.cshtml - client-side HTML (in \server\pages)


Creating a new Action 'XXX':

\server\Models\Enums.cs -> add an action XXX to ActionEnum
\server\Pages\Index.cshtml -> add a button to trigger the action
\server\wwwroot\chat.js -> add an EventListener (copy other ones)
\server\Hubs\ChatHub.cs -> UserClickedXXX
\server\Models\ActionFactory.cs -> add a line to create a new ActionXxx object
\server\Models\ActionXXX.cs -> copy an existing command to create the new action
\server\Models\Game.cs -> will almost certainly need loads of changes for any new command, especially:
	- SetActionAvailabilityBasedOnCurrentPlayer


Rebuild game from current log

(reopened|started the game|started next hand|joined|continued)

ServerState
	RoomList
Room
	RoomId
Action
	Room level, can drill to game if necessary



\[.*\n.*{.*\n.*"CardValue":

Remove extras after game 2

To recreate a single game from a game log that contains multiple games

1) Copy the complete log to a new file in e.g. C:\Users\johnr\OneDrive - derbyshireuk\$CLOUD\7-Studs Poker\Poker Evenings\2020-11-14
	- e.g. "2020-11-14 game 1.json"

(reopened|started the game|started next hand|joined|continued|folded=)